tokens:
 - ID:
    description: "a string consisting of any combination of letters (in the range a-z, A-Z), digits (in the range 0-9) as well as underscores ( _ ) with the exception that it may not start with a digit."
 - STR:
    description: "a string consisting of any combination of letters, digits, and symbols (e.g. $, âˆš)"
 - NUM:
    description: "a string consisting of only digits separated by at most one dot ( . ) at most one case insensitive \"e\" which must come after the dot."
 - LPAREN:
    lexeme: "("
 - RPAREN:
    lexeme: ")"
 - LSQUARE:
    lexeme: "["
 - RSQUARE:
    lexeme: "]"
 - LBRACE:
    lexeme: "{"
 - RBRACE:
    lexeme: "}"
 - EQUALS:
    lexeme: "="
 - PLUS:
    lexeme: "+"
 - MINUS:
    lexeme: "-"
 - STAR:
    lexeme: "*"
 - SLASH:
    lexeme: "/"
 - PCT:
    lexeme: "%"
 - CARET:
    lexeme: "^"
 - AMP:
    lexeme: "&"
 - PIPE:
    lexeme: "|"
 - TILDE:
    lexeme: "~"
 - EXCL:
    lexeme: "!"
 - CARET_PIPE:
    lexeme: "^|"
 - STAR_STAR:
    lexeme: "**"
 - SLASH_SLASH:
    lexeme: "//"
 - LT_LT:
    lexeme: "<<"
 - GT_GT:
    lexeme: ">>"
 - L_ARROW:
    lexeme: "<-"
 - R_ARROW:
    lexeme: "->"
 - COLON_EQUALS:
    lexeme: ":="
 - DOT:
    lexeme: "."
 - COMMA:
    lexeme: ","
 - COLON:
    lexeme: ":"
 - SEMICOLON:
    lexeme: ";"
 - QUESTION:
    lexeme: "?"
 - POUND:
    lexeme: "#"
 - DOLLAR:
    lexeme: "$"
 - QUOTE:
    lexeme: "\""
 - APOSTROPHE:
    lexeme: "'"
 - BACKSLASH:
    lexeme: "\\\\"
 - BACKTICK:
    lexeme: "`"
 - UNDERSCORE:
    lexeme: "_"
 - BOF_:
    lexeme: "BOF"
 - EOF_:
    lexeme: "EOF"
keywords:
 - TRUE_:
    lexeme: "true"
 - FALSE_:
    lexeme: "false"
 - NONE_:
    lexeme: "none"
 - NULL_:
    lexeme: "NULL"
whitespace:
 - SPACE:
    description: "ascii 32"
 - TAB:
    description: "ascii 9"
 - NEWLINE:
    description: "ascii 10"
nonterminalSymbols:
 - "statement"
 - "expr"
 - "lvalue"
 - "expr1"
 - "expr3"
 - "expr4"
 - "expr5"
 - "expr6"
 - "expr7"
 - "expr11"
 - "expr12"
 - "expr13"
 - "exprn"
 - "exprl"
 - "factor"
 - "arglist"
startSymbol: "statement"
productionRules:
 - "statement expr"
 - "expr lvalue EQUALS expr1"
 - "expr lvalue COLON_EQUALS expr1"
 - "expr lvalue L_ARROW expr1"
 - "expr expr1"

 # Operator Predence Rules (Based off https://en.cppreference.com/w/cpp/language/operator_precedence)

 - "expr1 expr3"

 - "expr3 TILDE expr3"
 - "expr3 expr4"

 - "expr4 expr4 CARET expr5"
 - "expr4 expr4 EXCL"
 - "expr4 expr5"

 - "expr5 expr5 STAR expr6"
 - "expr5 expr5 SLASH expr6"
 - "expr5 expr5 SLASH_SLASH expr6"
 - "expr5 expr5 PCT expr6"
 - "expr5 expr6"

 - "expr6 expr6 PLUS expr7"
 - "expr6 expr6 MINUS expr7"
 - "expr6 expr7"

 - "expr7 expr7 LT_LT expr11"
 - "expr7 expr7 GT_GT expr11"
 - "expr7 expr11"

 - "expr11 expr11 AMP expr12"
 - "expr11 expr12"

 - "expr12 expr12 CARET_PIPE expr13"
 - "expr12 expr13"

 - "expr13 expr13 PIPE exprn"
 - "expr13 exprn"

 # Most basic expression forms

 - "exprn PIPE expr PIPE"
 - "exprn LPAREN expr RPAREN"
 - "exprn ID LPAREN RPAREN"
 - "exprn ID LPAREN arglist RPAREN"
 - "exprn exprl"

 - "exprl factor"
 - "exprl lvalue"

 # factors

 - "factor NUM"
 - "factor NONE_"
 - "factor TRUE_"
 - "factor FALSE_"
 - "factor ID"

 # lvalues

 - "lvalue ID"
 - "lvalue LPAREN lvalue RPAREN"

 # Other

 - "arglist expr"
 - "arglist expr COMMA arglist"

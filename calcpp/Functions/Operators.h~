#pragma once

/***************************************************
 *************** Auto-Generated File ***************
 ***************************************************/

#include <cstring>

#include "../Scanner/scanner.h"
#include "../Utils/BinarySearch.h"

namespace calcpp {
    namespace operators {

        constexpr const int size =
            // begin sourcegen size
            17
            // end sourcegen
            ;
        constexpr const int offset =
            // begin sourcegen offset
            20
            // end sourcegen
            ;
        constexpr const int precedences[size] = {
            // begin sourcegen precedences
            -8, -5, -11, -15, -16, -2, -7, -17, -17, -2, -1, -3, -3, -3, -3, -2,
            -9, -15, -9, -15, -10, -10, -12, -2, -10, -10, -12, -2, -2, -14, -2,
            -15, -2, -6, -4, -13, -2, -17, -2, -17, -17, -15, -2, -15, -15, -2,
            -16, -10, -2
            // end sourcegen
        };
        constexpr const bool single[size] = {
            // begin sourcegen single
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0
            // end sourcegen
        };

    }  // namespace operators
}  // namespace calcpp

namespace Operators {
    constexpr const int size = 35;
    constexpr const int offset = 30;
    constexpr const char* operators[size] = {",",  "=",  ":=", "<-", "->", "...", "||",
                                             "&&", "|",  "^|", "&",  "==", "!=",  "<",
                                             ">",  "<=", ">=", "~",  "'",  "<<",  ">>",
                                             "+",  "-",  "*",  "/",  "%",  "//",  "!",
                                             "!!", "C",  "P",  "^",  "**", ":",   "::"};
    constexpr const int precedences[size] = {
        -1,  2,   2,   2,   2,   -3,  -4,  -5,  -6,  -7,  -8,  -9,
        -9,  -10, -10, -10, -10, 10,  -11, -12, -12, -13, -13, -14,
        -14, -14, -14, -14, -14, -14, -14, 15,  15,  16,  16};
    constexpr const bool singleOperators[size] = {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
                                                  0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
                                                  0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0};

    constexpr int indexOf(const char* lexeme) {
        for (int i = 0; i < size; ++i) {
            if (compare_string(lexeme, operators[i]) == 0) { return i; }
        }
        return -1;
    }
    inline int indexOf(const std::string& lexeme) { return indexOf(lexeme.c_str()); }

    constexpr bool isOperator(Scanner::Type type) { return (int(type) - offset) >= 0; }
    constexpr bool isOperator(int index) { return index >= 0; }

    constexpr int _abs(int x) { return x >= 0 ? x : -x; }

    constexpr int getPrecedence(Scanner::Type type) {
        return _abs(precedences[int(type) - offset]);
    }
    constexpr int getPrecedence(int index) { return _abs(precedences[index]); }

    constexpr bool isRightAssociative(Scanner::Type type) {
        return precedences[int(type) - offset] > 0;
    }
    constexpr bool isRightAssociative(int index) { return precedences[index] > 0; }

    constexpr bool isSingleOperator(Scanner::Type type) {
        return singleOperators[int(type) - offset];
    }
    constexpr bool isSingleOperator(int index) { return singleOperators[index]; }
}  // namespace Operators

#include <vector>

namespace calcpp {

    template<typename T>
    class MultiStack {
        std::vector<T> stack;
        std::vector<size_t> splits;

      public:
        MultiStack(size_t capacity) {
            stack.reserve(capacity);
            splits.reserve(capacity);
        }

        size_t stackSize() {
            if (!splits.empty()) { return stack.size() - splits.back(); }
            return stack.size();
        }
        size_t size() { return stack.size(); }

        void push(T item) { stack.emplace_back(item); }

        T pop() {
            if (stackSize() == 0) {
                throw std::runtime_error("Cannot pop off of empty stack");
            }
            T item = std::move(stack.back());
            stack.pop_back();
            return std::move(item);
        }

        void pushStack() { splits.emplace_back(stack.size()); }
        void popStack() {
            if (stackSize() > 0) {
                throw std::runtime_error("Cannot pop an unempty stack");
            }
            if (!splits.empty()) { splits.pop_back(); }
        }
    };
}  // namespace calcpp

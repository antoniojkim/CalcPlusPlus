specialTokens:
    - HEX
    - BIN
    - NUM
    - ID
    - SPECIALID
    - FUNCTION
    - TUPLE
    - MATRIX
operators:
    COMMA:
        lexeme: ","
        precedence: 1
    EQUALS:
        lexeme: "="
        precedence: 2
        rightAssociative:
    COLON_EQUALS:
        lexeme: ":="
        precedence: 2
        rightAssociative:
    L_ARROW:
        lexeme: "<-"
        precedence: 2
        rightAssociative:
    PIPE_PIPE:
        lexeme: "||"
        precedence: 3
    AMP_AMP:
        lexeme: "&&"
        precedence: 4
    PIPE:
        lexeme: "|"
        precedence: 5
    CARET_PIPE:
        lexeme: "^|"
        precedence: 6
    AMP:
        lexeme: "&"
        precedence: 7
    EQUALS_EQUALS:
        lexeme: "=="
        precedence: 8
    NOT_EQUALS:
        lexeme: "!="
        precedence: 8
    LT:
        lexeme: "<"
        precedence: 9
    GT:
        lexeme: ">"
        precedence: 9
    LT_EQ:
        lexeme: "<="
        precedence: 9
    GT_EQ:
        lexeme: ">="
        precedence: 9
    TILDE:
        lexeme: "~"
        precedence: 9
        singleOperator:
    LT_LT:
        lexeme: "<<"
        precedence: 10
    GT_GT:
        lexeme: ">>"
        precedence: 10
    PLUS:
        lexeme: "+"
        precedence: 11
        expression:
    MINUS:
        lexeme: "-"
        precedence: 11
        expression:
    STAR:
        lexeme: "*"
        precedence: 12
        expression:
    SLASH:
        lexeme: "/"
        precedence: 12
        expression:
    PCT:
        lexeme: "%"
        precedence: 12
    SLASH_SLASH:
        lexeme: "//"
        precedence: 12
    EXCL:
        lexeme: "!"
        precedence: 12
        singleOperator:
    CARET:
        lexeme: "^"
        precedence: 13
        rightAssociative: True
    STAR_STAR:
        lexeme: "**"
        precedence: 13
        rightAssociative: True
    R_ARROW:
        lexeme: "->"
        precedence: 14
        rightAssociative: True
    COLON:
        lexeme: ":"
        precedence: 14
        rightAssociative: True
tokens:
    LPAREN: "("
    RPAREN: ")"
    LSQUARE: "["
    RSQUARE: "]"
    LBRACE: "{"
    RBRACE: "}"
    DOT: "."
    SEMICOLON: ";"
    QUESTION: "?"
    POUND: "#"
    DOLLAR: "$"
    QUOTE: "\\\""
    APOSTROPHE: "\\'"
    BACKSLASH: "\\\\"
    BACKTICK: "`"
    UNDERSCORE: "_"
    C: "C"
    P: "P"
functions:
    # Basic
    neg:
    abs:
    sqrt:
    # Trigonometry
    sin:
    cos:
    tan:
    csc:
    sec:
    cot:
    asin:
    acos:
    atan:
    acsc:
    asec:
    acot:
    arcsin:
    arccos:
    arctan:
    arccsc:
    arcsec:
    arccot:
    sinh:
    cosh:
    tanh:
    csch:
    sech:
    coth:
    asinh:
    acosh:
    atanh:
    acsch:
    asech:
    acoth:
    arsinh:
    arcosh:
    artanh:
    arcsch:
    arsech:
    arcoth:
    arcsinh:
    arccosh:
    arctanh:
    arccsch:
    arcsech:
    arccoth:
    # Exponentials
    exp:
    exp_2:
    expm1:
    log:
    log_2:
    log1p:
    ln:
    ln_2:
    ln1p:
    logn: 2
    # Calculus
    dx: 0
    deriv: 2
    integral: 3
    integrate: 0
    # Statistics
    mean: -1
    var: -1
    variance: -1
    sd: -1
    std: -1
    stdev: -1
    tss: -1
    absdev: -1
    skew: -1
    kurt: -1
    kurtosis: -1
    lag1: -1
    autocorr: -1
    max: -1
    min: -1
    argmax: -1
    argmin: -1
    median: -1
    # Polynomials
    quad: 3
    quadc: 3
    cubic: 4
    cubicc: 4
    # Linear Algebra
    det: 1
functionExprs:
    - tuple
    - quad
    - quadc
    - cubic
    - cubicc
    - det
printFunctions:
    - tuple

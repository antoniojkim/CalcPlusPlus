specialTokens:
    - HEX
    - BIN
    - NUM
    - ID
    - SPECIALID
    - FUNCTION
    - TUPLE
    - MATRIX
operators:
    COMMA:
        lexeme: ","
        precedence: 1
    EQUALS:
        lexeme: "="
        precedence: 2
        rightAssociative:
    COLON_EQUALS:
        lexeme: ":="
        precedence: 2
        rightAssociative:
    L_ARROW:
        lexeme: "<-"
        precedence: 2
        rightAssociative:
    R_ARROW:
        lexeme: "->"
        precedence: 2
        rightAssociative: True
        expression:
    PIPE_PIPE:
        lexeme: "||"
        precedence: 3
    AMP_AMP:
        lexeme: "&&"
        precedence: 4
    PIPE:
        lexeme: "|"
        precedence: 5
    CARET_PIPE:
        lexeme: "^|"
        precedence: 6
    AMP:
        lexeme: "&"
        precedence: 7
    EQUALS_EQUALS:
        lexeme: "=="
        precedence: 8
    NOT_EQUALS:
        lexeme: "!="
        precedence: 8
    LT:
        lexeme: "<"
        precedence: 9
    GT:
        lexeme: ">"
        precedence: 9
    LT_EQ:
        lexeme: "<="
        precedence: 9
    GT_EQ:
        lexeme: ">="
        precedence: 9
    TILDE:
        lexeme: "~"
        precedence: 9
        singleOperator:
    LT_LT:
        lexeme: "<<"
        precedence: 10
    GT_GT:
        lexeme: ">>"
        precedence: 10
    PLUS:
        lexeme: "+"
        precedence: 11
        expression:
        derivative:
    MINUS:
        lexeme: "-"
        precedence: 11
        expression:
        derivative:
    STAR:
        lexeme: "*"
        precedence: 12
        expression:
        derivative:
    SLASH:
        lexeme: "/"
        precedence: 12
        expression:
        derivative:
    PCT:
        lexeme: "%"
        precedence: 12
    SLASH_SLASH:
        lexeme: "//"
        precedence: 12
    EXCL:
        lexeme: "!"
        precedence: 12
        singleOperator:
    EXCL_EXCL:
        lexeme: "!!"
        precedence: 12
        singleOperator:
    CHOOSE:
        lexeme: "C"
        precedence: 12
    PERMUTE:
        lexeme: "P"
        precedence: 12
    CARET:
        lexeme: "^"
        precedence: 13
        rightAssociative: True
        expression:
        derivative:
    STAR_STAR:
        lexeme: "**"
        precedence: 13
        rightAssociative: True
        expression:
        derivative:
    COLON:
        lexeme: ":"
        precedence: 14
        rightAssociative: True
tokens:
    LPAREN: "("
    RPAREN: ")"
    LSQUARE: "["
    RSQUARE: "]"
    LBRACE: "{"
    RBRACE: "}"
    DOT: "."
    SEMICOLON: ";"
    QUESTION: "?"
    POUND: "#"
    DOLLAR: "$"
    QUOTE: "\\\""
    APOSTROPHE: "\\'"
    BACKSLASH: "\\\\"
    BACKTICK: "`"
    UNDERSCORE: "_"
    C: "C"
    P: "P"
constants:
    pi:
        val: M_PI
        short: π
        longval: "3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328"
    e:  # Euler's Number
        val: M_E
        short: e
        longval: "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932"
    gamma:  # Euler–Mascheroni constant
        val: M_EULER
        short: γ
        longval: "0.5772156649015328606065120900824024310421593359399235988057672348848677267776646709369470632917467495146314472498"
    vphi:  # Golden Ratio
        val: 1.6180339887498948482
        short: ϕ
        longval: "1.61803398874989484820458683436563811772030917980576286213544862270526046281890244970720720418939113748475408807538"
